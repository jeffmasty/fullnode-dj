// Generated by delombok at Wed Apr 20 02:15:34 MDT 2016
package org.fullnodej;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/**
 * rpc password/user (to match bitcoin.conf) and network location of bitcoind's RPC interface.
 */
public class RpcParams {
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(RpcParams.class);

	/**
	 * list of keys looked for in a .properties collection
	 */
	public enum PropertyKeys {
		USER("fullnode.rpcuser"),
		PASSWORD("fullnode.rpcpassword"),
		PROTOCOL("fullnode.protocol"),
		ADDRESS("fullnode.ipaddress"),
		PORT("fullnode.port");
		public final String key;

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private PropertyKeys(final String key) {
			this.key = key;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getKey() {
			return this.key;
		}
	}
	public static final String DEFAULT_USER = "bitcoinrpc";
	public static final URL DEFAULT_URL = _staticUrl("http://127.0.0.1:8332");
	public static final URL DEFUALT_TESTNET_URL = _staticUrl("http://127.0.0.1:18332");

	private static URL _staticUrl(String s) {
		try {
			return new URL(s);
		} catch (MalformedURLException t) {
			return null;
		}
	}
	
	/**
	 * bitcoind rpc username
	 */
	private final String user;
	
	/**
	 * bitcoind rpc password
	 */
	private final String password;
	
	/**
	 * location of the full node rpc interface
	 */
	private final URL url;

	/**
	 * @param props a properties object containing settings with keys listed in the {@link PropertyKeys} enum
	 * @throws MalformedURLException
	 */
	public RpcParams(Properties props) throws MalformedURLException {
		user = props.getProperty(PropertyKeys.USER.getKey(), "bitcoinrpc");
		password = props.getProperty(PropertyKeys.PASSWORD.getKey(), "");
		String ipAddress = props.getProperty(PropertyKeys.ADDRESS.getKey(), "127.0.0.1");
		String protocol = props.getProperty(PropertyKeys.PROTOCOL.getKey(), "http");
		int port = 8332;
		try {
			port = Integer.parseInt(props.getProperty(PropertyKeys.PORT.getKey()));
		} catch (NumberFormatException | NullPointerException e) {
			log.debug(props.getProperty(PropertyKeys.PORT.getKey()) + " " + e.getMessage());
		}
		url = new URL(protocol + "://" + ipAddress + ":" + port + "/");
	}

	/**
	 * very basic params using defaults and supplied bitcoin.conf password if isTestnet then port = 18332 else port = 8332
	 */
	public RpcParams(String password, boolean isTestnet) {
		this.password = password;
		this.user = DEFAULT_USER;
		this.url = (isTestnet) ? DEFUALT_TESTNET_URL : DEFAULT_URL;
	}

	/**
	 * basic params using defaults and supplied RPC password and port
	 * @throws MalformedURLException
	 */
	public RpcParams(String password, int bitcoindPort) throws MalformedURLException {
		this.password = password;
		this.user = DEFAULT_USER;
		this.url = new URL("http://127.0.0.1:" + bitcoindPort);
	}

	/**
	 * very basic params mainnet defaults and supplied bitcoin.conf password
	 */
	public RpcParams(String password) {
		this.password = password;
		this.user = DEFAULT_USER;
		this.url = DEFAULT_URL;
	}

	public Map<String, String> basicHeader() {
		Map<String, String> result = new HashMap<>(2);
		result.put("content-type", "text/plain");
		result.put("Authorization", "Basic " + new String(Base64.getEncoder().encode((user + ":" + password).getBytes())));
		return result;
	}

	/**
	 * bitcoind rpc username
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getUser() {
		return this.user;
	}

	/**
	 * bitcoind rpc password
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getPassword() {
		return this.password;
	}

	/**
	 * location of the full node rpc interface
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public URL getUrl() {
		return this.url;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof RpcParams)) return false;
		final RpcParams other = (RpcParams)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$password = this.getPassword();
		final java.lang.Object other$password = other.getPassword();
		if (this$password == null ? other$password != null : !this$password.equals(other$password)) return false;
		final java.lang.Object this$url = this.getUrl();
		final java.lang.Object other$url = other.getUrl();
		if (this$url == null ? other$url != null : !this$url.equals(other$url)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof RpcParams;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 43 : $user.hashCode());
		final java.lang.Object $password = this.getPassword();
		result = result * PRIME + ($password == null ? 43 : $password.hashCode());
		final java.lang.Object $url = this.getUrl();
		result = result * PRIME + ($url == null ? 43 : $url.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "RpcParams(user=" + this.getUser() + ", url=" + this.getUrl() + ")";
	}

	@java.beans.ConstructorProperties({"user", "password", "url"})
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public RpcParams(final String user, final String password, final URL url) {
		this.user = user;
		this.password = password;
		this.url = url;
	}
}