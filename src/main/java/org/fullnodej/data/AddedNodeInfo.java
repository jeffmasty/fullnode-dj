// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.util.List;

/**
 * @see <a href="">getaddednodeinfo wiki</a>
 */
public class AddedNodeInfo {
	String addednode;
	boolean connected;
	
	/**
	 * If the Details parameter was set to true, this will be
	 * an array of addresses belonging to the added node
	 */
	List<AddedNodeAddressInfo> addresses;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public AddedNodeInfo() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAddednode() {
		return this.addednode;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isConnected() {
		return this.connected;
	}

	/**
	 * If the Details parameter was set to true, this will be
	 * an array of addresses belonging to the added node
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<AddedNodeAddressInfo> getAddresses() {
		return this.addresses;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddednode(final String addednode) {
		this.addednode = addednode;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setConnected(final boolean connected) {
		this.connected = connected;
	}

	/**
	 * If the Details parameter was set to true, this will be
	 * an array of addresses belonging to the added node
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddresses(final List<AddedNodeAddressInfo> addresses) {
		this.addresses = addresses;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof AddedNodeInfo)) return false;
		final AddedNodeInfo other = (AddedNodeInfo)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$addednode = this.getAddednode();
		final java.lang.Object other$addednode = other.getAddednode();
		if (this$addednode == null ? other$addednode != null : !this$addednode.equals(other$addednode)) return false;
		if (this.isConnected() != other.isConnected()) return false;
		final java.lang.Object this$addresses = this.getAddresses();
		final java.lang.Object other$addresses = other.getAddresses();
		if (this$addresses == null ? other$addresses != null : !this$addresses.equals(other$addresses)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof AddedNodeInfo;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $addednode = this.getAddednode();
		result = result * PRIME + ($addednode == null ? 43 : $addednode.hashCode());
		result = result * PRIME + (this.isConnected() ? 79 : 97);
		final java.lang.Object $addresses = this.getAddresses();
		result = result * PRIME + ($addresses == null ? 43 : $addresses.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "AddedNodeInfo(addednode=" + this.getAddednode() + ", connected=" + this.isConnected() + ", addresses=" + this.getAddresses() + ")";
	}
}