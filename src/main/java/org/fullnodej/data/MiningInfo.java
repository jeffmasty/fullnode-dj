// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.math.BigDecimal;
import org.fullnodej.Rpc;

/**
 * Mining-related information
 * @see <a href="https://bitcoin.org/en/developer-reference#getmininginfo">getmininginfo wiki</a><br/> {@link Rpc#getmininginfo()}
 */
public class MiningInfo {
	int blocks;
	int currentblocksize;
	int currentblocktx;
	BigDecimal difficulty;
	
	/**
	 * empty string if no warnings, sample errors String:
	 * <pre>WARNING: abnormally high number of blocks generated, 123 blocks received in the last 4 hours (24 expected)</pre>
	 */
	String errors;
	
	/**
	 * The limit on the number of processors for generation. If generation was enabled since the last time this rpc was restarted,
	 * this is the number used in the second parameter of the setgenerate. not mining = -1
	 */
	int genproclimit;
	
	/**
	 * Estimated hashes/second the network is generating. @see {@link Rpc#gethashespersec()}
	 */
	long networkhashps;
	
	/**
	 * number of transactions in the memory pool
	 */
	int pooledtx;
	
	/**
	 * false if this rpc is on mainnet or a regtest
	 */
	boolean testnet;
	
	/**
	 * main|test|regtest
	 */
	String chain;
	
	/**
	 * true if currently mining
	 */
	boolean generate;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public MiningInfo() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getBlocks() {
		return this.blocks;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getCurrentblocksize() {
		return this.currentblocksize;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getCurrentblocktx() {
		return this.currentblocktx;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getDifficulty() {
		return this.difficulty;
	}

	/**
	 * empty string if no warnings, sample errors String:
	 * <pre>WARNING: abnormally high number of blocks generated, 123 blocks received in the last 4 hours (24 expected)</pre>
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getErrors() {
		return this.errors;
	}

	/**
	 * The limit on the number of processors for generation. If generation was enabled since the last time this rpc was restarted,
	 * this is the number used in the second parameter of the setgenerate. not mining = -1
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getGenproclimit() {
		return this.genproclimit;
	}

	/**
	 * Estimated hashes/second the network is generating. @see {@link Rpc#gethashespersec()}
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getNetworkhashps() {
		return this.networkhashps;
	}

	/**
	 * number of transactions in the memory pool
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getPooledtx() {
		return this.pooledtx;
	}

	/**
	 * false if this rpc is on mainnet or a regtest
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isTestnet() {
		return this.testnet;
	}

	/**
	 * main|test|regtest
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getChain() {
		return this.chain;
	}

	/**
	 * true if currently mining
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isGenerate() {
		return this.generate;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBlocks(final int blocks) {
		this.blocks = blocks;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCurrentblocksize(final int currentblocksize) {
		this.currentblocksize = currentblocksize;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCurrentblocktx(final int currentblocktx) {
		this.currentblocktx = currentblocktx;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDifficulty(final BigDecimal difficulty) {
		this.difficulty = difficulty;
	}

	/**
	 * empty string if no warnings, sample errors String:
	 * <pre>WARNING: abnormally high number of blocks generated, 123 blocks received in the last 4 hours (24 expected)</pre>
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setErrors(final String errors) {
		this.errors = errors;
	}

	/**
	 * The limit on the number of processors for generation. If generation was enabled since the last time this rpc was restarted,
	 * this is the number used in the second parameter of the setgenerate. not mining = -1
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setGenproclimit(final int genproclimit) {
		this.genproclimit = genproclimit;
	}

	/**
	 * Estimated hashes/second the network is generating. @see {@link Rpc#gethashespersec()}
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setNetworkhashps(final long networkhashps) {
		this.networkhashps = networkhashps;
	}

	/**
	 * number of transactions in the memory pool
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPooledtx(final int pooledtx) {
		this.pooledtx = pooledtx;
	}

	/**
	 * false if this rpc is on mainnet or a regtest
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTestnet(final boolean testnet) {
		this.testnet = testnet;
	}

	/**
	 * main|test|regtest
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setChain(final String chain) {
		this.chain = chain;
	}

	/**
	 * true if currently mining
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setGenerate(final boolean generate) {
		this.generate = generate;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof MiningInfo)) return false;
		final MiningInfo other = (MiningInfo)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (this.getBlocks() != other.getBlocks()) return false;
		if (this.getCurrentblocksize() != other.getCurrentblocksize()) return false;
		if (this.getCurrentblocktx() != other.getCurrentblocktx()) return false;
		final java.lang.Object this$difficulty = this.getDifficulty();
		final java.lang.Object other$difficulty = other.getDifficulty();
		if (this$difficulty == null ? other$difficulty != null : !this$difficulty.equals(other$difficulty)) return false;
		final java.lang.Object this$errors = this.getErrors();
		final java.lang.Object other$errors = other.getErrors();
		if (this$errors == null ? other$errors != null : !this$errors.equals(other$errors)) return false;
		if (this.getGenproclimit() != other.getGenproclimit()) return false;
		if (this.getNetworkhashps() != other.getNetworkhashps()) return false;
		if (this.getPooledtx() != other.getPooledtx()) return false;
		if (this.isTestnet() != other.isTestnet()) return false;
		final java.lang.Object this$chain = this.getChain();
		final java.lang.Object other$chain = other.getChain();
		if (this$chain == null ? other$chain != null : !this$chain.equals(other$chain)) return false;
		if (this.isGenerate() != other.isGenerate()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof MiningInfo;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + this.getBlocks();
		result = result * PRIME + this.getCurrentblocksize();
		result = result * PRIME + this.getCurrentblocktx();
		final java.lang.Object $difficulty = this.getDifficulty();
		result = result * PRIME + ($difficulty == null ? 43 : $difficulty.hashCode());
		final java.lang.Object $errors = this.getErrors();
		result = result * PRIME + ($errors == null ? 43 : $errors.hashCode());
		result = result * PRIME + this.getGenproclimit();
		final long $networkhashps = this.getNetworkhashps();
		result = result * PRIME + (int)($networkhashps >>> 32 ^ $networkhashps);
		result = result * PRIME + this.getPooledtx();
		result = result * PRIME + (this.isTestnet() ? 79 : 97);
		final java.lang.Object $chain = this.getChain();
		result = result * PRIME + ($chain == null ? 43 : $chain.hashCode());
		result = result * PRIME + (this.isGenerate() ? 79 : 97);
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "MiningInfo(blocks=" + this.getBlocks() + ", currentblocksize=" + this.getCurrentblocksize() + ", currentblocktx=" + this.getCurrentblocktx() + ", difficulty=" + this.getDifficulty() + ", errors=" + this.getErrors() + ", genproclimit=" + this.getGenproclimit() + ", networkhashps=" + this.getNetworkhashps() + ", pooledtx=" + this.getPooledtx() + ", testnet=" + this.isTestnet() + ", chain=" + this.getChain() + ", generate=" + this.isGenerate() + ")";
	}
}
/*Sample:    {blocks=764409, currentblocksize=0, currentblocktx=0, difficulty=1.0,
 * 	  errors=WARNING: abnormally high number of blocks generated, 123 blocks received in the last 4 hours (24 expected),
 *    genproclimit=-1, networkhashps=20617321657386, pooledtx=0, testnet=true, chain=test, generate=false}*/