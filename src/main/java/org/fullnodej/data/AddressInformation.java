// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

/**
 * @see <a href="https://bitcoin.org/en/developer-reference#validateaddress">validateaddress wiki</a>
 */
public class AddressInformation {

	
	/**
	 * true for valid P2PKH or P2SH addresses
	 */
	boolean isvalid;
	
	/**
	 * The address as was requested, if it is valid
	 */
	String address;
	
	/**
	 * undocumented hex string
	 */
	String scriptPubKey;
	
	/**
	 * true if the address is part of a wallet account
	 */
	boolean ismine;
	
	/**
	 * true if the address is part of the wallet but is only being watched (no private key)
	 */
	boolean iswatchonly;
	
	/**
	 * true if the address is a P2SH address, null if not in wallet.
	 */
	boolean isscript;
	
	/**
	 * non-null for P2SH address requests belonging to this wallet, or null.<br/>
	 * Type of script returned:
	 * <ul><li><code>pubkey</code> for a P2PK script inside P2SH</li>
	 * <li><code>pubkeyhash</code> for a P2PKH script inside P2SH</li>
	 * <li><code>multisig</code> for a multisig script inside P2SH</li>
	 * <li><code>nonstandard<code> for unknown scripts</li><ul>
	 */
	ScriptType script;
	
	/**
	 * redeem script encoded as hex, for P2SH address requests belonging to this wallet
	 */
	String hex;
	
	/**
	 * P2PKH addresses used in this script or computed P2PKH addresses of pubkeys,
	 * for P2SH address requests belonging to the wallet, or null
	 */
	String[] addresses;
	
	/**
	 * number of signatures required by the script for P2SH addresses belonging to the wallet
	 */
	Integer sigrequired;
	
	/**
	 * hex string of public key for P2PKH AddressInfo requests belonging to the wallet
	 */
	String pubkey;
	
	/**
	 * compression setting of P2PKH AddressInfo requests belonging to the the wallet
	 */
	boolean iscompressed;
	
	/**
	 * Wallet Account the address belongs to, empty string for default account, null if not in wallet
	 */
	String account;

	public boolean isValid() {
		return isvalid;
	}

	public boolean isMine() {
		return ismine;
	}

	public boolean isWatchOnly() {
		return iswatchonly;
	}

	public boolean isScript() {
		return isscript;
	}

	public boolean isCompressed() {
		return iscompressed;
	}

	/**
	 * true for valid P2PKH or P2SH addresses
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setIsvalid(final boolean isvalid) {
		this.isvalid = isvalid;
	}

	/**
	 * The address as was requested, if it is valid
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddress(final String address) {
		this.address = address;
	}

	/**
	 * undocumented hex string
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScriptPubKey(final String scriptPubKey) {
		this.scriptPubKey = scriptPubKey;
	}

	/**
	 * true if the address is part of a wallet account
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setIsmine(final boolean ismine) {
		this.ismine = ismine;
	}

	/**
	 * true if the address is part of the wallet but is only being watched (no private key)
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setIswatchonly(final boolean iswatchonly) {
		this.iswatchonly = iswatchonly;
	}

	/**
	 * true if the address is a P2SH address, null if not in wallet.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setIsscript(final boolean isscript) {
		this.isscript = isscript;
	}

	/**
	 * non-null for P2SH address requests belonging to this wallet, or null.<br/>
	 * Type of script returned:
	 * <ul><li><code>pubkey</code> for a P2PK script inside P2SH</li>
	 * <li><code>pubkeyhash</code> for a P2PKH script inside P2SH</li>
	 * <li><code>multisig</code> for a multisig script inside P2SH</li>
	 * <li><code>nonstandard<code> for unknown scripts</li><ul>
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScript(final ScriptType script) {
		this.script = script;
	}

	/**
	 * redeem script encoded as hex, for P2SH address requests belonging to this wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setHex(final String hex) {
		this.hex = hex;
	}

	/**
	 * P2PKH addresses used in this script or computed P2PKH addresses of pubkeys,
	 * for P2SH address requests belonging to the wallet, or null
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddresses(final String[] addresses) {
		this.addresses = addresses;
	}

	/**
	 * number of signatures required by the script for P2SH addresses belonging to the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setSigrequired(final Integer sigrequired) {
		this.sigrequired = sigrequired;
	}

	/**
	 * hex string of public key for P2PKH AddressInfo requests belonging to the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPubkey(final String pubkey) {
		this.pubkey = pubkey;
	}

	/**
	 * compression setting of P2PKH AddressInfo requests belonging to the the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setIscompressed(final boolean iscompressed) {
		this.iscompressed = iscompressed;
	}

	/**
	 * Wallet Account the address belongs to, empty string for default account, null if not in wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAccount(final String account) {
		this.account = account;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof AddressInformation)) return false;
		final AddressInformation other = (AddressInformation)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (this.isvalid != other.isvalid) return false;
		final java.lang.Object this$address = this.getAddress();
		final java.lang.Object other$address = other.getAddress();
		if (this$address == null ? other$address != null : !this$address.equals(other$address)) return false;
		final java.lang.Object this$scriptPubKey = this.getScriptPubKey();
		final java.lang.Object other$scriptPubKey = other.getScriptPubKey();
		if (this$scriptPubKey == null ? other$scriptPubKey != null : !this$scriptPubKey.equals(other$scriptPubKey)) return false;
		if (this.ismine != other.ismine) return false;
		if (this.iswatchonly != other.iswatchonly) return false;
		if (this.isscript != other.isscript) return false;
		final java.lang.Object this$script = this.getScript();
		final java.lang.Object other$script = other.getScript();
		if (this$script == null ? other$script != null : !this$script.equals(other$script)) return false;
		final java.lang.Object this$hex = this.getHex();
		final java.lang.Object other$hex = other.getHex();
		if (this$hex == null ? other$hex != null : !this$hex.equals(other$hex)) return false;
		if (!java.util.Arrays.deepEquals(this.getAddresses(), other.getAddresses())) return false;
		final java.lang.Object this$sigrequired = this.getSigrequired();
		final java.lang.Object other$sigrequired = other.getSigrequired();
		if (this$sigrequired == null ? other$sigrequired != null : !this$sigrequired.equals(other$sigrequired)) return false;
		final java.lang.Object this$pubkey = this.getPubkey();
		final java.lang.Object other$pubkey = other.getPubkey();
		if (this$pubkey == null ? other$pubkey != null : !this$pubkey.equals(other$pubkey)) return false;
		if (this.iscompressed != other.iscompressed) return false;
		final java.lang.Object this$account = this.getAccount();
		final java.lang.Object other$account = other.getAccount();
		if (this$account == null ? other$account != null : !this$account.equals(other$account)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof AddressInformation;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + (this.isvalid ? 79 : 97);
		final java.lang.Object $address = this.getAddress();
		result = result * PRIME + ($address == null ? 43 : $address.hashCode());
		final java.lang.Object $scriptPubKey = this.getScriptPubKey();
		result = result * PRIME + ($scriptPubKey == null ? 43 : $scriptPubKey.hashCode());
		result = result * PRIME + (this.ismine ? 79 : 97);
		result = result * PRIME + (this.iswatchonly ? 79 : 97);
		result = result * PRIME + (this.isscript ? 79 : 97);
		final java.lang.Object $script = this.getScript();
		result = result * PRIME + ($script == null ? 43 : $script.hashCode());
		final java.lang.Object $hex = this.getHex();
		result = result * PRIME + ($hex == null ? 43 : $hex.hashCode());
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getAddresses());
		final java.lang.Object $sigrequired = this.getSigrequired();
		result = result * PRIME + ($sigrequired == null ? 43 : $sigrequired.hashCode());
		final java.lang.Object $pubkey = this.getPubkey();
		result = result * PRIME + ($pubkey == null ? 43 : $pubkey.hashCode());
		result = result * PRIME + (this.iscompressed ? 79 : 97);
		final java.lang.Object $account = this.getAccount();
		result = result * PRIME + ($account == null ? 43 : $account.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "AddressInformation(isvalid=" + this.isvalid + ", address=" + this.getAddress() + ", scriptPubKey=" + this.getScriptPubKey() + ", ismine=" + this.ismine + ", iswatchonly=" + this.iswatchonly + ", isscript=" + this.isscript + ", script=" + this.getScript() + ", hex=" + this.getHex() + ", addresses=" + java.util.Arrays.deepToString(this.getAddresses()) + ", sigrequired=" + this.getSigrequired() + ", pubkey=" + this.getPubkey() + ", iscompressed=" + this.iscompressed + ", account=" + this.getAccount() + ")";
	}

	/**
	 * The address as was requested, if it is valid
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAddress() {
		return this.address;
	}

	/**
	 * undocumented hex string
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getScriptPubKey() {
		return this.scriptPubKey;
	}

	/**
	 * non-null for P2SH address requests belonging to this wallet, or null.<br/>
	 * Type of script returned:
	 * <ul><li><code>pubkey</code> for a P2PK script inside P2SH</li>
	 * <li><code>pubkeyhash</code> for a P2PKH script inside P2SH</li>
	 * <li><code>multisig</code> for a multisig script inside P2SH</li>
	 * <li><code>nonstandard<code> for unknown scripts</li><ul>
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ScriptType getScript() {
		return this.script;
	}

	/**
	 * redeem script encoded as hex, for P2SH address requests belonging to this wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getHex() {
		return this.hex;
	}

	/**
	 * P2PKH addresses used in this script or computed P2PKH addresses of pubkeys,
	 * for P2SH address requests belonging to the wallet, or null
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String[] getAddresses() {
		return this.addresses;
	}

	/**
	 * number of signatures required by the script for P2SH addresses belonging to the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Integer getSigrequired() {
		return this.sigrequired;
	}

	/**
	 * hex string of public key for P2PKH AddressInfo requests belonging to the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getPubkey() {
		return this.pubkey;
	}

	/**
	 * Wallet Account the address belongs to, empty string for default account, null if not in wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAccount() {
		return this.account;
	}
}