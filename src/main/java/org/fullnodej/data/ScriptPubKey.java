// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.util.ArrayList;

public class ScriptPubKey extends ScriptSig {

	public static enum Type {
		
		/**
		 * P2PK script
		 */
		pubkey,
		
		/**
		 * P2PKH script
		 */
		pubkeyhash,
		
		/**
		 * P2SH script
		 */
		scripthash,
		
		/**
		 * bare multisig script
		 */
		multisig,
		
		/**
		 * nulldata scripts
		 */
		nulldata,
		
		/**
		 * unknown scripts
		 */
		nonstandard;

	}
	Type type;
	
	/**
	 * The number of signatures required; this is always 1 for P2PK, P2PKH,
	 * and P2SH (including P2SH multisig because the redeem script is not
	 * available in the pubkey script). It may be greater than 1 for bare multisig.
	 * This value will not be returned for nulldata or nonstandard script {@link #type}
	 */
	Integer reqSigs;
	
	/**
	 * P2PKH or P2SH addresses used in this transaction, or the computed P2PKH
	 * address of any pubkeys in this transaction. This array will not be
	 * returned for nulldata or nonstandard script types.
	 * boolean coinbase?
	 */
	private ArrayList<String> addresses;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ScriptPubKey() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Type getType() {
		return this.type;
	}

	/**
	 * The number of signatures required; this is always 1 for P2PK, P2PKH,
	 * and P2SH (including P2SH multisig because the redeem script is not
	 * available in the pubkey script). It may be greater than 1 for bare multisig.
	 * This value will not be returned for nulldata or nonstandard script {@link #type}
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Integer getReqSigs() {
		return this.reqSigs;
	}

	/**
	 * P2PKH or P2SH addresses used in this transaction, or the computed P2PKH
	 * address of any pubkeys in this transaction. This array will not be
	 * returned for nulldata or nonstandard script types.
	 * boolean coinbase?
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ArrayList<String> getAddresses() {
		return this.addresses;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setType(final Type type) {
		this.type = type;
	}

	/**
	 * The number of signatures required; this is always 1 for P2PK, P2PKH,
	 * and P2SH (including P2SH multisig because the redeem script is not
	 * available in the pubkey script). It may be greater than 1 for bare multisig.
	 * This value will not be returned for nulldata or nonstandard script {@link #type}
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReqSigs(final Integer reqSigs) {
		this.reqSigs = reqSigs;
	}

	/**
	 * P2PKH or P2SH addresses used in this transaction, or the computed P2PKH
	 * address of any pubkeys in this transaction. This array will not be
	 * returned for nulldata or nonstandard script types.
	 * boolean coinbase?
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddresses(final ArrayList<String> addresses) {
		this.addresses = addresses;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "ScriptPubKey(type=" + this.getType() + ", reqSigs=" + this.getReqSigs() + ", addresses=" + this.getAddresses() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ScriptPubKey)) return false;
		final ScriptPubKey other = (ScriptPubKey)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$type = this.getType();
		final java.lang.Object other$type = other.getType();
		if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
		final java.lang.Object this$reqSigs = this.getReqSigs();
		final java.lang.Object other$reqSigs = other.getReqSigs();
		if (this$reqSigs == null ? other$reqSigs != null : !this$reqSigs.equals(other$reqSigs)) return false;
		final java.lang.Object this$addresses = this.getAddresses();
		final java.lang.Object other$addresses = other.getAddresses();
		if (this$addresses == null ? other$addresses != null : !this$addresses.equals(other$addresses)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ScriptPubKey;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $type = this.getType();
		result = result * PRIME + ($type == null ? 43 : $type.hashCode());
		final java.lang.Object $reqSigs = this.getReqSigs();
		result = result * PRIME + ($reqSigs == null ? 43 : $reqSigs.hashCode());
		final java.lang.Object $addresses = this.getAddresses();
		result = result * PRIME + ($addresses == null ? 43 : $addresses.hashCode());
		return result;
	}
}