// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.math.BigDecimal;
import java.util.ArrayList;

/**
 * The <a href="https://bitcoin.org/en/developer-reference#getblockchaininfo">getblockchaininfo RPC</a>
 * provides information about the current state of the block chain.
 */
public class BlockchainInfo {
	
	/**
	 * main, test, or regtest
	 */
	String chain;
	long blocks;
	
	/**
	 * number of validated headers in the local best headers chain.
	 * may be higher than the number of blocks
	 */
	long headers;
	String bestblockhash;
	
	/**
	 * The difficulty of the highest-height block in the best block chain
	 */
	BigDecimal difficulty;
	
	/**
	 * Estimate of what percentage of the block chain transactions have been verified
	 * so far, starting at 0.0 and increasing to 1.0 for fully verified. May slightly
	 * exceed 1.0 when fully synced to account for transactions in the memory pool
	 */
	BigDecimal verificationprogress;
	
	/**
	 * estimated number of block header hashes checked from the genesis block to
	 * this block, encoded as big-endian hex
	 */
	String chainwork;
	Boolean pruned;
	ArrayList<Softfork> softforks;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BlockchainInfo() {
	}

	/**
	 * main, test, or regtest
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getChain() {
		return this.chain;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getBlocks() {
		return this.blocks;
	}

	/**
	 * number of validated headers in the local best headers chain.
	 * may be higher than the number of blocks
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getHeaders() {
		return this.headers;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getBestblockhash() {
		return this.bestblockhash;
	}

	/**
	 * The difficulty of the highest-height block in the best block chain
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getDifficulty() {
		return this.difficulty;
	}

	/**
	 * Estimate of what percentage of the block chain transactions have been verified
	 * so far, starting at 0.0 and increasing to 1.0 for fully verified. May slightly
	 * exceed 1.0 when fully synced to account for transactions in the memory pool
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getVerificationprogress() {
		return this.verificationprogress;
	}

	/**
	 * estimated number of block header hashes checked from the genesis block to
	 * this block, encoded as big-endian hex
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getChainwork() {
		return this.chainwork;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Boolean getPruned() {
		return this.pruned;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ArrayList<Softfork> getSoftforks() {
		return this.softforks;
	}

	/**
	 * main, test, or regtest
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setChain(final String chain) {
		this.chain = chain;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBlocks(final long blocks) {
		this.blocks = blocks;
	}

	/**
	 * number of validated headers in the local best headers chain.
	 * may be higher than the number of blocks
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setHeaders(final long headers) {
		this.headers = headers;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBestblockhash(final String bestblockhash) {
		this.bestblockhash = bestblockhash;
	}

	/**
	 * The difficulty of the highest-height block in the best block chain
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDifficulty(final BigDecimal difficulty) {
		this.difficulty = difficulty;
	}

	/**
	 * Estimate of what percentage of the block chain transactions have been verified
	 * so far, starting at 0.0 and increasing to 1.0 for fully verified. May slightly
	 * exceed 1.0 when fully synced to account for transactions in the memory pool
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setVerificationprogress(final BigDecimal verificationprogress) {
		this.verificationprogress = verificationprogress;
	}

	/**
	 * estimated number of block header hashes checked from the genesis block to
	 * this block, encoded as big-endian hex
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setChainwork(final String chainwork) {
		this.chainwork = chainwork;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPruned(final Boolean pruned) {
		this.pruned = pruned;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setSoftforks(final ArrayList<Softfork> softforks) {
		this.softforks = softforks;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof BlockchainInfo)) return false;
		final BlockchainInfo other = (BlockchainInfo)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$chain = this.getChain();
		final java.lang.Object other$chain = other.getChain();
		if (this$chain == null ? other$chain != null : !this$chain.equals(other$chain)) return false;
		if (this.getBlocks() != other.getBlocks()) return false;
		if (this.getHeaders() != other.getHeaders()) return false;
		final java.lang.Object this$bestblockhash = this.getBestblockhash();
		final java.lang.Object other$bestblockhash = other.getBestblockhash();
		if (this$bestblockhash == null ? other$bestblockhash != null : !this$bestblockhash.equals(other$bestblockhash)) return false;
		final java.lang.Object this$difficulty = this.getDifficulty();
		final java.lang.Object other$difficulty = other.getDifficulty();
		if (this$difficulty == null ? other$difficulty != null : !this$difficulty.equals(other$difficulty)) return false;
		final java.lang.Object this$verificationprogress = this.getVerificationprogress();
		final java.lang.Object other$verificationprogress = other.getVerificationprogress();
		if (this$verificationprogress == null ? other$verificationprogress != null : !this$verificationprogress.equals(other$verificationprogress)) return false;
		final java.lang.Object this$chainwork = this.getChainwork();
		final java.lang.Object other$chainwork = other.getChainwork();
		if (this$chainwork == null ? other$chainwork != null : !this$chainwork.equals(other$chainwork)) return false;
		final java.lang.Object this$pruned = this.getPruned();
		final java.lang.Object other$pruned = other.getPruned();
		if (this$pruned == null ? other$pruned != null : !this$pruned.equals(other$pruned)) return false;
		final java.lang.Object this$softforks = this.getSoftforks();
		final java.lang.Object other$softforks = other.getSoftforks();
		if (this$softforks == null ? other$softforks != null : !this$softforks.equals(other$softforks)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof BlockchainInfo;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $chain = this.getChain();
		result = result * PRIME + ($chain == null ? 43 : $chain.hashCode());
		final long $blocks = this.getBlocks();
		result = result * PRIME + (int)($blocks >>> 32 ^ $blocks);
		final long $headers = this.getHeaders();
		result = result * PRIME + (int)($headers >>> 32 ^ $headers);
		final java.lang.Object $bestblockhash = this.getBestblockhash();
		result = result * PRIME + ($bestblockhash == null ? 43 : $bestblockhash.hashCode());
		final java.lang.Object $difficulty = this.getDifficulty();
		result = result * PRIME + ($difficulty == null ? 43 : $difficulty.hashCode());
		final java.lang.Object $verificationprogress = this.getVerificationprogress();
		result = result * PRIME + ($verificationprogress == null ? 43 : $verificationprogress.hashCode());
		final java.lang.Object $chainwork = this.getChainwork();
		result = result * PRIME + ($chainwork == null ? 43 : $chainwork.hashCode());
		final java.lang.Object $pruned = this.getPruned();
		result = result * PRIME + ($pruned == null ? 43 : $pruned.hashCode());
		final java.lang.Object $softforks = this.getSoftforks();
		result = result * PRIME + ($softforks == null ? 43 : $softforks.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "BlockchainInfo(chain=" + this.getChain() + ", blocks=" + this.getBlocks() + ", headers=" + this.getHeaders() + ", bestblockhash=" + this.getBestblockhash() + ", difficulty=" + this.getDifficulty() + ", verificationprogress=" + this.getVerificationprogress() + ", chainwork=" + this.getChainwork() + ", pruned=" + this.getPruned() + ", softforks=" + this.getSoftforks() + ")";
	}
}