// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.util.List;

public class Script {
	
	/**
	 * Redeem script in decoded form with non-data-pushing opcodes listed. May be empty
	 */
	String asm;
	ScriptType type;
	
	/**
	 * Number of signatures required; this is always 1 for P2PK or P2PKH within P2SH.
	 * May be greater than 1 for P2SH multisig. Will not be returned for nonstandard
	 */
	int reqSigs;
	List<ScriptAddress> addresses;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Script() {
	}

	/**
	 * Redeem script in decoded form with non-data-pushing opcodes listed. May be empty
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAsm() {
		return this.asm;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ScriptType getType() {
		return this.type;
	}

	/**
	 * Number of signatures required; this is always 1 for P2PK or P2PKH within P2SH.
	 * May be greater than 1 for P2SH multisig. Will not be returned for nonstandard
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getReqSigs() {
		return this.reqSigs;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<ScriptAddress> getAddresses() {
		return this.addresses;
	}

	/**
	 * Redeem script in decoded form with non-data-pushing opcodes listed. May be empty
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAsm(final String asm) {
		this.asm = asm;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setType(final ScriptType type) {
		this.type = type;
	}

	/**
	 * Number of signatures required; this is always 1 for P2PK or P2PKH within P2SH.
	 * May be greater than 1 for P2SH multisig. Will not be returned for nonstandard
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReqSigs(final int reqSigs) {
		this.reqSigs = reqSigs;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddresses(final List<ScriptAddress> addresses) {
		this.addresses = addresses;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Script)) return false;
		final Script other = (Script)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$asm = this.getAsm();
		final java.lang.Object other$asm = other.getAsm();
		if (this$asm == null ? other$asm != null : !this$asm.equals(other$asm)) return false;
		final java.lang.Object this$type = this.getType();
		final java.lang.Object other$type = other.getType();
		if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
		if (this.getReqSigs() != other.getReqSigs()) return false;
		final java.lang.Object this$addresses = this.getAddresses();
		final java.lang.Object other$addresses = other.getAddresses();
		if (this$addresses == null ? other$addresses != null : !this$addresses.equals(other$addresses)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Script;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $asm = this.getAsm();
		result = result * PRIME + ($asm == null ? 43 : $asm.hashCode());
		final java.lang.Object $type = this.getType();
		result = result * PRIME + ($type == null ? 43 : $type.hashCode());
		result = result * PRIME + this.getReqSigs();
		final java.lang.Object $addresses = this.getAddresses();
		result = result * PRIME + ($addresses == null ? 43 : $addresses.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "Script(asm=" + this.getAsm() + ", type=" + this.getType() + ", reqSigs=" + this.getReqSigs() + ", addresses=" + this.getAddresses() + ")";
	}
}