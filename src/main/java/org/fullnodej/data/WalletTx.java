// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.math.BigDecimal;
import java.util.List;

public class WalletTx {
	
	/**
	 * positive if tx increased the wallet balance,
	 * negative if decreased, 0 if no effect
	 */
	BigDecimal amount;
	
	/**
	 * fee paid (as negative value), if outgoing
	 */
	BigDecimal fee;
	
	/**
	 * number of confirmations the transaction has received. Will be 0 for unconfirmed and -1 for conflicted
	 */
	int confirmations;
	
	/**
	 * true for mined txs, else null
	 */
	Boolean generated;
	
	/**
	 * hex of best chain's containing block, only if confirmations > 0
	 */
	String blockhash;
	
	/**
	 * height of best chain's containing block, only if confirmations > 0
	 */
	int blockindex;
	
	/**
	 * header time of best chain's containing block, only if confiramtions > 0
	 */
	long blocktime;
	
	/**
	 * hex string of this here wallet transaction
	 */
	String txid;
	
	/**
	 * TXIDs of conflicting txs that spend the same inputs, possibly empty
	 */
	List<String> walletconflicts;
	
	/**
	 * when the tx was added to the wallet
	 */
	long time;
	
	/**
	 * when the zeroconf was detected, or time of containing block
	 */
	long timereceived;
	String account;
	String otheraccount;
	String address;
	TxCategory category;
	int vout;
	
	/**
	 * locally stored comment field
	 */
	String comment;
	
	/**
	 * locally stored to comment field
	 */
	String to;
	
	/**
	 * one object for each input or output affecting the wallet, not returned in listsinceblock
	 */
	List<WalletTxDetails> details;
	
	/**
	 * tx serialized in hex format, not returned in listsinceblock
	 */
	String hex;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public WalletTx() {
	}

	/**
	 * positive if tx increased the wallet balance,
	 * negative if decreased, 0 if no effect
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getAmount() {
		return this.amount;
	}

	/**
	 * fee paid (as negative value), if outgoing
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getFee() {
		return this.fee;
	}

	/**
	 * number of confirmations the transaction has received. Will be 0 for unconfirmed and -1 for conflicted
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getConfirmations() {
		return this.confirmations;
	}

	/**
	 * true for mined txs, else null
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Boolean getGenerated() {
		return this.generated;
	}

	/**
	 * hex of best chain's containing block, only if confirmations > 0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getBlockhash() {
		return this.blockhash;
	}

	/**
	 * height of best chain's containing block, only if confirmations > 0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getBlockindex() {
		return this.blockindex;
	}

	/**
	 * header time of best chain's containing block, only if confiramtions > 0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getBlocktime() {
		return this.blocktime;
	}

	/**
	 * hex string of this here wallet transaction
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getTxid() {
		return this.txid;
	}

	/**
	 * TXIDs of conflicting txs that spend the same inputs, possibly empty
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<String> getWalletconflicts() {
		return this.walletconflicts;
	}

	/**
	 * when the tx was added to the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getTime() {
		return this.time;
	}

	/**
	 * when the zeroconf was detected, or time of containing block
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getTimereceived() {
		return this.timereceived;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAccount() {
		return this.account;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getOtheraccount() {
		return this.otheraccount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAddress() {
		return this.address;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TxCategory getCategory() {
		return this.category;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getVout() {
		return this.vout;
	}

	/**
	 * locally stored comment field
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getComment() {
		return this.comment;
	}

	/**
	 * locally stored to comment field
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getTo() {
		return this.to;
	}

	/**
	 * one object for each input or output affecting the wallet, not returned in listsinceblock
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<WalletTxDetails> getDetails() {
		return this.details;
	}

	/**
	 * tx serialized in hex format, not returned in listsinceblock
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getHex() {
		return this.hex;
	}

	/**
	 * positive if tx increased the wallet balance,
	 * negative if decreased, 0 if no effect
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAmount(final BigDecimal amount) {
		this.amount = amount;
	}

	/**
	 * fee paid (as negative value), if outgoing
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setFee(final BigDecimal fee) {
		this.fee = fee;
	}

	/**
	 * number of confirmations the transaction has received. Will be 0 for unconfirmed and -1 for conflicted
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setConfirmations(final int confirmations) {
		this.confirmations = confirmations;
	}

	/**
	 * true for mined txs, else null
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setGenerated(final Boolean generated) {
		this.generated = generated;
	}

	/**
	 * hex of best chain's containing block, only if confirmations > 0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBlockhash(final String blockhash) {
		this.blockhash = blockhash;
	}

	/**
	 * height of best chain's containing block, only if confirmations > 0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBlockindex(final int blockindex) {
		this.blockindex = blockindex;
	}

	/**
	 * header time of best chain's containing block, only if confiramtions > 0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBlocktime(final long blocktime) {
		this.blocktime = blocktime;
	}

	/**
	 * hex string of this here wallet transaction
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTxid(final String txid) {
		this.txid = txid;
	}

	/**
	 * TXIDs of conflicting txs that spend the same inputs, possibly empty
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWalletconflicts(final List<String> walletconflicts) {
		this.walletconflicts = walletconflicts;
	}

	/**
	 * when the tx was added to the wallet
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTime(final long time) {
		this.time = time;
	}

	/**
	 * when the zeroconf was detected, or time of containing block
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTimereceived(final long timereceived) {
		this.timereceived = timereceived;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAccount(final String account) {
		this.account = account;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setOtheraccount(final String otheraccount) {
		this.otheraccount = otheraccount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddress(final String address) {
		this.address = address;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCategory(final TxCategory category) {
		this.category = category;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setVout(final int vout) {
		this.vout = vout;
	}

	/**
	 * locally stored comment field
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setComment(final String comment) {
		this.comment = comment;
	}

	/**
	 * locally stored to comment field
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTo(final String to) {
		this.to = to;
	}

	/**
	 * one object for each input or output affecting the wallet, not returned in listsinceblock
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDetails(final List<WalletTxDetails> details) {
		this.details = details;
	}

	/**
	 * tx serialized in hex format, not returned in listsinceblock
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setHex(final String hex) {
		this.hex = hex;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof WalletTx)) return false;
		final WalletTx other = (WalletTx)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$amount = this.getAmount();
		final java.lang.Object other$amount = other.getAmount();
		if (this$amount == null ? other$amount != null : !this$amount.equals(other$amount)) return false;
		final java.lang.Object this$fee = this.getFee();
		final java.lang.Object other$fee = other.getFee();
		if (this$fee == null ? other$fee != null : !this$fee.equals(other$fee)) return false;
		if (this.getConfirmations() != other.getConfirmations()) return false;
		final java.lang.Object this$generated = this.getGenerated();
		final java.lang.Object other$generated = other.getGenerated();
		if (this$generated == null ? other$generated != null : !this$generated.equals(other$generated)) return false;
		final java.lang.Object this$blockhash = this.getBlockhash();
		final java.lang.Object other$blockhash = other.getBlockhash();
		if (this$blockhash == null ? other$blockhash != null : !this$blockhash.equals(other$blockhash)) return false;
		if (this.getBlockindex() != other.getBlockindex()) return false;
		if (this.getBlocktime() != other.getBlocktime()) return false;
		final java.lang.Object this$txid = this.getTxid();
		final java.lang.Object other$txid = other.getTxid();
		if (this$txid == null ? other$txid != null : !this$txid.equals(other$txid)) return false;
		final java.lang.Object this$walletconflicts = this.getWalletconflicts();
		final java.lang.Object other$walletconflicts = other.getWalletconflicts();
		if (this$walletconflicts == null ? other$walletconflicts != null : !this$walletconflicts.equals(other$walletconflicts)) return false;
		if (this.getTime() != other.getTime()) return false;
		if (this.getTimereceived() != other.getTimereceived()) return false;
		final java.lang.Object this$account = this.getAccount();
		final java.lang.Object other$account = other.getAccount();
		if (this$account == null ? other$account != null : !this$account.equals(other$account)) return false;
		final java.lang.Object this$otheraccount = this.getOtheraccount();
		final java.lang.Object other$otheraccount = other.getOtheraccount();
		if (this$otheraccount == null ? other$otheraccount != null : !this$otheraccount.equals(other$otheraccount)) return false;
		final java.lang.Object this$address = this.getAddress();
		final java.lang.Object other$address = other.getAddress();
		if (this$address == null ? other$address != null : !this$address.equals(other$address)) return false;
		final java.lang.Object this$category = this.getCategory();
		final java.lang.Object other$category = other.getCategory();
		if (this$category == null ? other$category != null : !this$category.equals(other$category)) return false;
		if (this.getVout() != other.getVout()) return false;
		final java.lang.Object this$comment = this.getComment();
		final java.lang.Object other$comment = other.getComment();
		if (this$comment == null ? other$comment != null : !this$comment.equals(other$comment)) return false;
		final java.lang.Object this$to = this.getTo();
		final java.lang.Object other$to = other.getTo();
		if (this$to == null ? other$to != null : !this$to.equals(other$to)) return false;
		final java.lang.Object this$details = this.getDetails();
		final java.lang.Object other$details = other.getDetails();
		if (this$details == null ? other$details != null : !this$details.equals(other$details)) return false;
		final java.lang.Object this$hex = this.getHex();
		final java.lang.Object other$hex = other.getHex();
		if (this$hex == null ? other$hex != null : !this$hex.equals(other$hex)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof WalletTx;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $amount = this.getAmount();
		result = result * PRIME + ($amount == null ? 43 : $amount.hashCode());
		final java.lang.Object $fee = this.getFee();
		result = result * PRIME + ($fee == null ? 43 : $fee.hashCode());
		result = result * PRIME + this.getConfirmations();
		final java.lang.Object $generated = this.getGenerated();
		result = result * PRIME + ($generated == null ? 43 : $generated.hashCode());
		final java.lang.Object $blockhash = this.getBlockhash();
		result = result * PRIME + ($blockhash == null ? 43 : $blockhash.hashCode());
		result = result * PRIME + this.getBlockindex();
		final long $blocktime = this.getBlocktime();
		result = result * PRIME + (int)($blocktime >>> 32 ^ $blocktime);
		final java.lang.Object $txid = this.getTxid();
		result = result * PRIME + ($txid == null ? 43 : $txid.hashCode());
		final java.lang.Object $walletconflicts = this.getWalletconflicts();
		result = result * PRIME + ($walletconflicts == null ? 43 : $walletconflicts.hashCode());
		final long $time = this.getTime();
		result = result * PRIME + (int)($time >>> 32 ^ $time);
		final long $timereceived = this.getTimereceived();
		result = result * PRIME + (int)($timereceived >>> 32 ^ $timereceived);
		final java.lang.Object $account = this.getAccount();
		result = result * PRIME + ($account == null ? 43 : $account.hashCode());
		final java.lang.Object $otheraccount = this.getOtheraccount();
		result = result * PRIME + ($otheraccount == null ? 43 : $otheraccount.hashCode());
		final java.lang.Object $address = this.getAddress();
		result = result * PRIME + ($address == null ? 43 : $address.hashCode());
		final java.lang.Object $category = this.getCategory();
		result = result * PRIME + ($category == null ? 43 : $category.hashCode());
		result = result * PRIME + this.getVout();
		final java.lang.Object $comment = this.getComment();
		result = result * PRIME + ($comment == null ? 43 : $comment.hashCode());
		final java.lang.Object $to = this.getTo();
		result = result * PRIME + ($to == null ? 43 : $to.hashCode());
		final java.lang.Object $details = this.getDetails();
		result = result * PRIME + ($details == null ? 43 : $details.hashCode());
		final java.lang.Object $hex = this.getHex();
		result = result * PRIME + ($hex == null ? 43 : $hex.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "WalletTx(amount=" + this.getAmount() + ", fee=" + this.getFee() + ", confirmations=" + this.getConfirmations() + ", generated=" + this.getGenerated() + ", blockhash=" + this.getBlockhash() + ", blockindex=" + this.getBlockindex() + ", blocktime=" + this.getBlocktime() + ", txid=" + this.getTxid() + ", walletconflicts=" + this.getWalletconflicts() + ", time=" + this.getTime() + ", timereceived=" + this.getTimereceived() + ", account=" + this.getAccount() + ", otheraccount=" + this.getOtheraccount() + ", address=" + this.getAddress() + ", category=" + this.getCategory() + ", vout=" + this.getVout() + ", comment=" + this.getComment() + ", to=" + this.getTo() + ", details=" + this.getDetails() + ", hex=" + this.getHex() + ")";
	}
}