// Generated by delombok at Wed Apr 20 02:15:35 MDT 2016
package org.fullnodej.data;

import java.math.BigDecimal;

public class WalletTxDetails {
	
	/**
	 * true if watch-only, else null.<br/>added in 0.10.0
	 */
	Boolean involvesWatchonly;
	
	/**
	 * locally stored account credited or debited, can be the empty string
	 */
	String account;
	String address;
	TxCategory category;
	
	/**
	 * A negative bitcoin amount if sending payment; a positive bitcoin amount if receiving payment (including coinbases)
	 */
	BigDecimal amount;
	
	/**
	 * For an output, the output index (vout) for this output in this transaction.
	 * For an input, the output index for the output being spent in its transaction.<br/>
	 * Added in Bitcoin Core 0.10.0
	 */
	int vout;
	
	/**
	 * If sending payment, the fee paid as a negative bitcoins value. May be 0. Not returned if receiving payment
	 */
	BigDecimal fee;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public WalletTxDetails() {
	}

	/**
	 * true if watch-only, else null.<br/>added in 0.10.0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Boolean getInvolvesWatchonly() {
		return this.involvesWatchonly;
	}

	/**
	 * locally stored account credited or debited, can be the empty string
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAccount() {
		return this.account;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAddress() {
		return this.address;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TxCategory getCategory() {
		return this.category;
	}

	/**
	 * A negative bitcoin amount if sending payment; a positive bitcoin amount if receiving payment (including coinbases)
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getAmount() {
		return this.amount;
	}

	/**
	 * For an output, the output index (vout) for this output in this transaction.
	 * For an input, the output index for the output being spent in its transaction.<br/>
	 * Added in Bitcoin Core 0.10.0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getVout() {
		return this.vout;
	}

	/**
	 * If sending payment, the fee paid as a negative bitcoins value. May be 0. Not returned if receiving payment
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BigDecimal getFee() {
		return this.fee;
	}

	/**
	 * true if watch-only, else null.<br/>added in 0.10.0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setInvolvesWatchonly(final Boolean involvesWatchonly) {
		this.involvesWatchonly = involvesWatchonly;
	}

	/**
	 * locally stored account credited or debited, can be the empty string
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAccount(final String account) {
		this.account = account;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAddress(final String address) {
		this.address = address;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCategory(final TxCategory category) {
		this.category = category;
	}

	/**
	 * A negative bitcoin amount if sending payment; a positive bitcoin amount if receiving payment (including coinbases)
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAmount(final BigDecimal amount) {
		this.amount = amount;
	}

	/**
	 * For an output, the output index (vout) for this output in this transaction.
	 * For an input, the output index for the output being spent in its transaction.<br/>
	 * Added in Bitcoin Core 0.10.0
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setVout(final int vout) {
		this.vout = vout;
	}

	/**
	 * If sending payment, the fee paid as a negative bitcoins value. May be 0. Not returned if receiving payment
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setFee(final BigDecimal fee) {
		this.fee = fee;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof WalletTxDetails)) return false;
		final WalletTxDetails other = (WalletTxDetails)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$involvesWatchonly = this.getInvolvesWatchonly();
		final java.lang.Object other$involvesWatchonly = other.getInvolvesWatchonly();
		if (this$involvesWatchonly == null ? other$involvesWatchonly != null : !this$involvesWatchonly.equals(other$involvesWatchonly)) return false;
		final java.lang.Object this$account = this.getAccount();
		final java.lang.Object other$account = other.getAccount();
		if (this$account == null ? other$account != null : !this$account.equals(other$account)) return false;
		final java.lang.Object this$address = this.getAddress();
		final java.lang.Object other$address = other.getAddress();
		if (this$address == null ? other$address != null : !this$address.equals(other$address)) return false;
		final java.lang.Object this$category = this.getCategory();
		final java.lang.Object other$category = other.getCategory();
		if (this$category == null ? other$category != null : !this$category.equals(other$category)) return false;
		final java.lang.Object this$amount = this.getAmount();
		final java.lang.Object other$amount = other.getAmount();
		if (this$amount == null ? other$amount != null : !this$amount.equals(other$amount)) return false;
		if (this.getVout() != other.getVout()) return false;
		final java.lang.Object this$fee = this.getFee();
		final java.lang.Object other$fee = other.getFee();
		if (this$fee == null ? other$fee != null : !this$fee.equals(other$fee)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof WalletTxDetails;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $involvesWatchonly = this.getInvolvesWatchonly();
		result = result * PRIME + ($involvesWatchonly == null ? 43 : $involvesWatchonly.hashCode());
		final java.lang.Object $account = this.getAccount();
		result = result * PRIME + ($account == null ? 43 : $account.hashCode());
		final java.lang.Object $address = this.getAddress();
		result = result * PRIME + ($address == null ? 43 : $address.hashCode());
		final java.lang.Object $category = this.getCategory();
		result = result * PRIME + ($category == null ? 43 : $category.hashCode());
		final java.lang.Object $amount = this.getAmount();
		result = result * PRIME + ($amount == null ? 43 : $amount.hashCode());
		result = result * PRIME + this.getVout();
		final java.lang.Object $fee = this.getFee();
		result = result * PRIME + ($fee == null ? 43 : $fee.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "WalletTxDetails(involvesWatchonly=" + this.getInvolvesWatchonly() + ", account=" + this.getAccount() + ", address=" + this.getAddress() + ", category=" + this.getCategory() + ", amount=" + this.getAmount() + ", vout=" + this.getVout() + ", fee=" + this.getFee() + ")";
	}
}